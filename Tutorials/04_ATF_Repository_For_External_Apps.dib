#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

# Creatio Data Integration through [ATF repository][Atf Repository README]

To simply integration between Creatio and third party C# applications you can use ATF Repository. It allows you to work with Creatio data through C# classes and LINQ queries. [Clio][Clio README] generates models consumed by ATF Respository. This combination of tools significantly reduces time for integration development and testing. For further details please refer to [ATF repository documentation][ATF Repository README]

> WARNING: Required minimum [Clio][Clio README] version 6.0.2.4

Create directory in new C# project


[Clio README]: https://github.com/Advance-Technologies-Foundation/clio/blob/master/README.md
[ATF Repository README]: https://github.com/Advance-Technologies-Foundation/repository/blob/master/README.md

#!pwsh

# Create new directory
$workingDir = "C:\Projects\Tutorials\L4";
New-Item -ItemType Directory -Path $workingDir -Force;
Set-Location -Path $workingDir
explorer $workingDir

#!pwsh

dotnet new sln --name CreatioDataIntegration --force
dotnet new console -n CreatioDataIntegration --force
dotnet sln CreatioDataIntegration.sln add CreatioDataIntegration/CreatioDataIntegration.csproj
Invoke-Item CreatioDataIntegration.sln

#!markdown

Add `ATF.Repository` Nuget package to `CreatioDataIntegration` project

#!pwsh

cd CreatioDataIntegration;
dotnet add package ATF.Repository;
cd ..;

#!markdown

Generate ATF Models from an instance of Creatio

#!pwsh

# Use this command to refere to instance by name
# clio add-item model -n "CreatioDataIntegration.Models" -d C:\Projects\Tutorials\L4\CreatioDataIntegration\Models -e demo

# Alternatively, use this command to refere to instance by url username and password
# Arguments: -u AppUrl -l UserName -p Password -i IsNetCore -d OutputDirectory
clio-dev add-item model -n "CreatioDataIntegration.Models" -d "C:\Projects\Tutorials\L4\CreatioDataIntegration\Models" -u http://kkrylovn.tscrm.com:40016 -l Supervisor -p Supervisor -i True

#!markdown

4. Add generated classes to your project if necessary

5. Modify Program.cs to use ATF Repository

```csharp
	using ATF.Repository;
	using ATF.Repository.Providers;
	using CDI = CreatioDataIntegration.Models;

	const string appUrl = "<CREATIO_URL_HERE>";
	const string userName = "<CREATIO__LOGIN_HERE>";
	const string userPassword = "<CREATIO_PASSWORD_HERE>";
	IDataProvider dataProvider =new RemoteDataProvider (appUrl, userName, userPassword);
	IAppDataContext? context = AppDataContextFactory.GetAppDataContext(dataProvider);
	List<CDI.Contact> allContacts = context.Models<CDI.Contact>().ToList();
	allContacts.ForEach(c=> Console.WriteLine($"Id:{c.Id}\tName:{c.Name}"));
	Console.ReadKey();
```

Run project

```pwsh
dotnet run --project CreatioDataIntegration.csproj
```

#!pwsh

Set-Content -Path "C:\Projects\Tutorials\L4\CreatioDataIntegration\Program.cs" -Value @"
using ATF.Repository;
using ATF.Repository.Providers;
using CDI = CreatioDataIntegration.Models;

const string appUrl = "<CREATIO_URL_HERE>";
const string userName = "<CREATIO__LOGIN_HERE>";
const string userPassword = "<CREATIO_PASSWORD_HERE>";

IDataProvider dataProvider =new RemoteDataProvider(appUrl, userName, userPassword);
IAppDataContext? context = AppDataContextFactory.GetAppDataContext(dataProvider);
List<CDI.Contact> allContacts = context.Models<CDI.Contact>().ToList();
allContacts.ForEach(c=> Console.WriteLine($"Id:{c.Id}\tName:{c.Name}"));
"@;

#!markdown

Run project
```powershell
dotnet run --project CreatioDataIntegration.csproj
```

#!pwsh

dotnet run --project "C:\Projects\Tutorials\L4\CreatioDataIntegration\CreatioDataIntegration.csproj"
